version: '3.3'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3554:3000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://myuser:mypassword@db:5432/mydb
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
      - NODE_ENV=development
      - CHOKIDAR_INTERVAL=300
    depends_on:
      - db
    volumes:
      - ./src:/app/src  
      - ./public:/app/public  
      - ./package.json:/app/package.json 
      - ./package-lock.json:/app/package-lock.json  
      - ./tailwind.config.ts:/app/tailwind.config.ts  
      - ./src/app/globals.css:/app/src/app/globals.css  
      - ./tsconfig.json:/app/tsconfig.json  
      - ./prisma:/app/prisma  
      # - ./node_modules:/app/node_modules
      - ./.env:/app/.env
    restart: unless-stopped
    networks:
      - web-network
    command: sh -c "npm rebuild && npm run dev"

  migration:
    build: .
    command: sh -c "./scripts/run-migration.sh && tail -f /dev/null"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL
    healthcheck:
      test: ["CMD", "node", "-e", "require('./lib/db').verifyDbConnection()"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./scripts:/app/scripts
      - ./lib:/app/lib

  db:
    image: postgres:17
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    ports:
      - "5455:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - web-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5


networks:
  web-network:
    driver: bridge

volumes:
  postgres-data: