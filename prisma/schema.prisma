datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ROO-AUDIT-TAG :: plan-008-user-profile.md :: Define Prisma schema for user profile
model User {
  id           String @id @default(uuid())
  email        String @unique
  password     String
  name         String?
  avatarUrl    String?
  targetLang   String
  nativeLang   String
  primaryGoal  String
  secondaryGoals String[]
  comfortLevel Int
  dailyTarget  Int @default(15) // minutes
  studyPreferences Json? // {darkMode: Boolean, notifications: Boolean, etc.}
  learningStyle String? @default("visual") // visual, auditory, or kinesthetic
  progress     UserProgress[]
  srsEntries   SRSEntry[]
  lessons      Lesson[]
  voiceAnalyses VoiceAnalysis[]
  progressRecords Progress[]
  lessonAnalyses LessonAnalysis[]
  lessonAttempts LessonAttempt[]
  role          UserRole @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
// ROO-AUDIT-TAG :: plan-008-user-profile.md :: END

model LessonAnalysis {
  id               String   @id @default(cuid())
  lessonId         String
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  accuracy         Float
  pronunciationScore Float?
  weakPoints       String[]
  createdAt        DateTime @default(now())
}

model Lesson {
  id          String @id @default(uuid())
  title       String
  content     String
  difficulty  Int
  userId      String
  user        User @relation(fields: [userId], references: [id])
  exercises   Exercise[]
  completedAt DateTime?
  analysis    VoiceAnalysis[]
  progress    Progress[]
}

model Exercise {
  id          String @id @default(uuid())
  type        String // 'vocabulary', 'grammar', etc.
  content     Json
  difficulty  Int
  language    String
  tags        String // comma-separated list of tags
  lesson      Lesson @relation(fields: [lessonId], references: [id])
  lessonId    String
}

model UserProgress {
  id          String @id @default(uuid())
  userId      String
  user        User @relation(fields: [userId], references: [id])
  metric      String // 'vocabulary', 'grammar', etc.
  score       Float
  lastUpdated DateTime @default(now())
}

model Progress {
  id          String @id @default(uuid())
  userId      String
  user        User @relation(fields: [userId], references: [id])
  lessonId    String
  lesson      Lesson @relation(fields: [lessonId], references: [id])
  completed   Boolean @default(false)
  score       Float?
  attempts    Int     @default(0)
  startedAt   DateTime @default(now())
  completedAt DateTime?
}

model SRSEntry {
  id             String @id @default(uuid())
  userId         String
  user           User @relation(fields: [userId], references: [id])
  item           String // word or grammar concept
  recallStrength Float @default(1.0)
  nextReview     DateTime @default(now())
  language       String
  ease           Float @default(2.5)
  interval       Int @default(1)
  masteryLevel   Int @default(1)
  consecutiveCorrect Int @default(0)
  lastReviewed   DateTime @default(now())
  @@index([userId, nextReview])
  @@index([userId, masteryLevel])
}

model VoiceAnalysis {
  id        String @id @default(uuid())
  userId    String
  user      User @relation(fields: [userId], references: [id])
  lessonId  String
  lesson    Lesson @relation(fields: [lessonId], references: [id])
  metrics   Json // {pace: 120, accuracy: 0.85, ...}
  audioUrl  String
  createdAt DateTime @default(now())
}

// ROO-AUDIT-TAG :: plan-004-progress-tracking.md :: Add LessonAttempt model
model LessonAttempt {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  phoneticScore  Float
  fluencyScore   Float
  grammarScore   Float
  vocabularyScore Float
  overallScore   Float
  weakAreas      String[]
}

enum UserRole {
  USER
  ADMIN
}
// ROO-AUDIT-TAG :: plan-004-progress-tracking.md :: END
