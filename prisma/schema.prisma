// ROO-AUDIT-TAG :: plan-011-non-functional.md :: Enhance schema for security measures
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String @id @default(uuid())
  email        String @unique
  password     String // Will store hashed value
  name         String?
  avatarUrl    String?
  targetLang   String
  nativeLang   String
  primaryGoal  String
  secondaryGoals String[]
  comfortLevel Int
  dailyTarget  Int @default(15) // minutes
  studyPreferences Json?
  learningStyle String? @default("visual")
  progress     UserProgress[]
  srsEntries   SRSEntry[]
  lessons      Lesson[]
  voiceAnalyses VoiceAnalysis[]
  progressRecords Progress[]
  lessonAnalyses LessonAnalysis[]
  lessonAttempts LessonAttempt[]
  studySessions StudySession[]
  progressSnapshots ProgressSnapshot[]
  role          UserRole @default(USER)
  status        String @default("new") // 'new' | 'active'
  memoryRetentionRate Float? @default(0.7)
  preferredReviewTime String? @default("morning")
  subscriptionId String?
  stripeCustomerId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  auditLogs    AuditLog[]
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String   // e.g., 'LOGIN', 'PROFILE_UPDATE'
  entity    String?  // e.g., 'User', 'Lesson'
  entityId  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

model ProcessedEvent {
  id        String   @id @default(uuid())
  eventId   String   @unique
  createdAt DateTime @default(now())
}

model LessonAnalysis {
  id               String   @id @default(cuid())
  lessonId         String
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  accuracy         Float
  pronunciationScore Float?
  weakPoints       String[]
  createdAt        DateTime @default(now())
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  description String?
  content     Json
  difficulty  Int      @default(1)
  targetConcepts String[]
  language    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  exercises   Exercise[]
  completedAt DateTime?
  analysis    VoiceAnalysis[]
  progress    Progress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([userId, difficulty])
  @@index([userId, language])
}

model Exercise {
  id          String @id @default(uuid())
  type        String
  content     Json
  difficulty  Int
  language    String
  tags        String
  lesson      Lesson @relation(fields: [lessonId], references: [id])
  lessonId    String
}

model UserProgress {
  id          String @id @default(uuid())
  userId      String
  user        User @relation(fields: [userId], references: [id])
  metric      String
  score       Float
  lastUpdated DateTime @default(now())
}

model Progress {
  id          String @id @default(uuid())
  userId      String
  user        User @relation(fields: [userId], references: [id])
  lessonId    String
  lesson      Lesson @relation(fields: [lessonId], references: [id])
  completed   Boolean @default(false)
  score       Float?
  attempts    Int     @default(0)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  duration    Int?
}

model SRSEntry {
  id             String @id @default(uuid())
  userId         String
  user           User @relation(fields: [userId], references: [id])
  item           String
  recallStrength Float @default(1.0)
  nextReview     DateTime @default(now())
  language       String
  ease           Float @default(2.5)
  interval       Int @default(1)
  masteryLevel   Int @default(1)
  consecutiveCorrect Int @default(0)
  lastReviewed   DateTime @default(now())
  @@index([userId, nextReview])
  @@index([userId, masteryLevel])
  reviews      SRSReview[]
}

model SRSReview {
  id           String   @id @default(uuid())
  srsEntryId   String
  srsEntry     SRSEntry @relation(fields: [srsEntryId], references: [id])
  reviewedAt   DateTime @default(now())
  score        Float
  responseTime Int
  difficulty   Float
  interval     Int
  easeFactor   Float
}

model VoiceAnalysis {
  id        String @id @default(uuid())
  userId    String
  user      User @relation(fields: [userId], references: [id])
  lessonId  String
  lesson    Lesson @relation(fields: [lessonId], references: [id])
  metrics   Json
  audioUrl  String
  createdAt DateTime @default(now())
}

model LessonAttempt {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  phoneticScore  Float
  fluencyScore   Float
  grammarScore   Float
  vocabularyScore Float
  overallScore   Float
  weakAreas      String[]
}

model StudySession {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  duration     Int
  itemsReviewed Int
  accuracy     Float
  newItems     Int
  createdAt    DateTime @default(now())
}

model ProgressSnapshot {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  snapshot  String
  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
  AUDITOR
}
